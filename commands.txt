nest new sleepr         =   create new project
npm run start:dev       =   run app
nest g library common   =   generate the common library
nest g module database -p common     =   generate database module within the common library
nest g module config -p common       =   generate config module within the common library
nest g app reservations     =   generate a new microservice
nest g resource reservations    =   generate a CRUD resource called reservations
nest g app auth     =     generate new auth microservice
nest g module users     =   generate users module
nest g controller users
nest g service users
nest g app payments
nest g app notifications

npm i @nestjs/mongoose mongoose     =   install mongoose dependency

npm i @nestjs/config        =   install config dependency
npm i joi   =   install joi dependency for env variable validation

npm i class-validator class-transformer     =   Input Validation
npm i nestjs-pino pino-http pino-pretty     =   Logger

npm i @nestjs/passport passport passport-local      =   Passport for authentication
npm i -D @types/passport-local
npm i @nestjs/jwt passport-jwt      =   Jwt authentication
npm i -D @types/passport-jwt
npm i bcryptjs express      =   Password hashing - Alternative to bcrypt (to avoid issues with mounting volumes in docker with bcrypt)
npm i -D @types/bcryptjs
npm i cookie-parser     =   To parse incoming cookies and add them to request object
npm i -D @types/cookie-parser    

npm i @nestjs/microservices     =   To setup microservices communication

npm i stripe

npm i nodemailer
npm i -D @types/nodemailer


===============================================
After setting up gcloud on your PC
cd apps/reservations

docker build -t reservations -f . ../../ OR docker build -t reservations -f Dockerfile ../../
docker tag reservations us-east4-docker.pkg.dev/PROJECT_ID/reservations/production
docker image push us-east4-docker.pkg.dev/PROJECT_ID/reservations/production

==============================================
create package.json for each of the services
npm init

---------------------------------------------
docker-compose up --build

====================================================================================
K8s
====================================================================================
cd k8s
helm create sleepr
kubectl create deployment reservations --image=us-east4-docker.pkg.dev/PROJECT_ID/reservations/production --dry-run=client -o yaml > deployment.yaml
cd sleepr 
helm install sleepr .

kubectl logs reservations-5c445687c5-mfx4b

kubectl describe po reservations-5c445687c5-


gcloud permission:
kubectl create secret docker-registry gcr-json-key --docker-server=[URI of the repo in gcloud] --docker-username=_json_key --docker-password="$(cat ./sleepr-a778d2c28523.json)" --docker-email=john.doe@gmail.com

kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "gcr-json-key"}]}'
kubectl rollout restart deployment [deployment name]

Kubernates secrets (environment variables):
kubectl create secret generic mongodb --from-literal=connectionString=[MONGODB CONNECTIONSTRING]
        OR
kubectl create secret generic mongodb --from-file=mongodb=./mongo.txt
        OR with kubernates yaml file
encode in base64:  echo -n 'secret' | base64
kubectl apply -f ./secret.yaml

*****NOTE****** after every kubernates related file edit, run `helm upgrade sleepr .` to redeploy the changes
-----
Create service for notification service so that other services(pods can communicate with it in k8 cluster):
kubectl create service clusterip notifications --tcp=3004 --dry-run=client -o yaml > service.yaml
helm upgrade sleepr .
kubectl get svc
kubectl logs reservations-677cdfc548-tkfph --follow

... lastly create the reservations service. This is important bcos its where the users will enter to make calls to create reservations and trigger the whole application (This service will act like the api gateway)

kubectl create service nodeport reservations --tcp=3000 --dry-run=client -o yaml > service.yaml

---- more commands
kubectl edit secret google
kubectl rollout restart deployment notifications
kubectl config get-contexts
kubectl config use-context docker-desktop
kubectl get secrets
kubectl get secret stripe -o yaml > stripe.yaml
kubectl config use-context google-context
kubectl create -f stripe.yaml
// after creating the ingress and upgrading helm
kubectl get ing